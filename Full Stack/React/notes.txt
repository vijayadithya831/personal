... 


rest parameters/arguments => represent an indefinite number of parameters(it will pack arguements in to an array)

callbacks => a function call made inside a parameter of another function
             a function passed as an arguement to another function

             pros : it ensures that the function is not gonna execute before a task is completed
                    helps us to develop asynchronous code (when one function has to wait for another function)
                    helps us to avoid errors and some complex/potential problems


map (array.map) => executes a provided callback function once for each array element and creates a new array

Maps => it is an inbuilt object that hold key-value pairs of any datatype.
        keys should be unique, but values can have duplicates

        syntax : const store = new Map();
==================================================================================================================================
REACT ðŸ”¥

A Facebook and Instagram Collaboration 
initial release from 2013


React is not a framework, it is a library, used to create user interface

insta, fb, ebay, skype, bitbucket, etc is made up of React

WHY REACT JS??

* SEO friendly (Search Engine Optimization)
* Coding is simpler because of JSX (JavaScript XML language => HTML can be typed in js file)

Features of ReactJS

* Virtual DOM
* Unidirectional Data Flow

React Core Concepts

* JSX
* Components (v.v.v.v.v.v.v.v.v important)
* Virtual DOM
* Unidirectional Data Flow

React Components => Self-contained reusable building blocks of web application

React is a component based architecture => this will break down our application into small encapsulated parts which can be composed to make more complex UIs.

header, side navbar, content of the page, footer => individual components of a page => aka inner components or nested componenets

root component => this components holds all other inner components

Components => components is completely reusable code => which means for example, if we develop an article component in react, we can use that in angular, vue, etc.

React is completely declarative (imperative => antonym) => Tell react what we want and reacg will build the actual UI => This is implicit way

==================================================================================================================================

to download react (prerequsites) => 1. node js
                                    2. browser
                                    3. vscode

Commands to create react application

1. npx create-react-app (my-app)

change directory => cd (my-app)

run react app => npm start

==================================================================================================================================

Components => In React, component represents a part of user interfaces. They are reusable
              Components can be nested inside other components.
              Components are the building blocks of any react application.


components are categorised into two types =>1. Stateless Functional Components
                                            2. Stateful Class Components

                1. => JavaScript function
                eg. function Greetings(props) {
                    return <h1> Hello, {props.name} </h1>;
                }

                2. => Classes
                eg. class Greeting extends React.Component {
                    render() {
                        return <h1>Hello, {this.props.name}</h1>
                    }
                }
        Return => returns a value back to the place where we invoked the function.

Function component:
    Properties is otherwise known as parameters/arguements, which we pass into function component
    
==================================================================================================================================

To install npm create-react-app globally (Run in cmd) => npm install create-react-app -g

to install npm globally => npm install -g npm@latest

==================================================================================================================================

Class Component:
    It is a normal js class


Functional Vs Class:
    Functional: It is a simple function which receives the props and returns the declaration or jsx.
                we need to try and use functional components as much as possible
                absence of 'this' keyword (advantage)
                Here we will find the solution without using the state => thats why it is called stateless component/dumb compnonent/presentational component.
    Class:      it has a bit more features than function components.
                they can maintain their own private date, aka states.
                They can contain more complicated UI logics
                They provide life-cycle hooks (most important point)
                they are also known as stateful components/smart components/container components

JSX: JavaScript XML => it is an extension to the JavaScript language syntax i.e., we will be able to write HTML like code for elements and components

Props: Properties, it is the optional input that our component can accept and it also allows the component to behave dynamic.
       Props are read-only data that are shared between components => parent componenet can send data to child component.
       they are passed as function parameters/arguements

syntax for props => <Component key=value/>



Task 
use functional component => use arrow functions
component 1
    1 h1 tag
    1 h2 tag
    1 p tag
    4 parameters
component 2
    3 buttons
component 3
    1 form => username, password, submit button

==================================================================================================================================

Task => create 4 buttons, each button should change the state given
2 headings, 2 paragraphs should be given
button 1 => change 1 heading
button 2 => change 1 paragraphs
button 3 => change 2 headings
button 4 => change 2 paragraphs

==================================================================================================================================

State in ReactJS => States are managed inside or within the component.
                    Variables are declared inside the function body.

Destructuring props and states => *it is an ES6 feature, that enables us to unpack values from the array or properties from objects into distinct variables
                                  * It is used in react to improve code readability.
                                  * Destructuring can be achieved in 2 ways in function componenet.
                                        1. we can destructure in the function parameters itself.
                                        2. we can destructure in the function body.

            1. => Instead of props, we are gonna have curly braces in the function parameter. => {}
            2. => create a constant destructure and assign the value of props to it. => const {} = props;


Conditional Rendering : The content of the document is rendered based on a condition.
        1. if/else rendering
        2. Ternary rendering

Styling in CSS using React ðŸ”¥: 
        1. CSS in JS Libraries
        2. CSS Stylesheets
        3. Inline CSS

        steps:
            1. create a js file for your component
            2. create a css file and import it in your component js file
            3. give classnames for the particular html elements in the component and fetch those in css as usual

==================================================================================================================================

Task : Create a list of objects for 4 bank customers.
        customer name, customer account number, customer pan number, customer acc balance.
        using map method, render the details in the UI.

==================================================================================================================================
*Advanced react topics*

Fragments => *fragments will let us group a list of children elements without adding extra nodes (div tags) to the DOM
              Which is, the function component contains the return statement, which in turn contains a div tag. while rendering, this div acts as an extra tag, which will create complications while rendering. So, in order to remove the div from the DOM, we use <React.Fragment></React.Fragment> (or <></> => this also indicates fragments) so that multiple parent tags can be given inside the return and the program works just fine.
             *Fragments can also accept key attribute while rendering list of data.


Pure Components in React JS: The parent component and normal component will re-render for the set interval time continuously, but pure component do not. The main difference between a normal class component and a pure class component is that it stops the re-rendering process in the background.

==================================================================================================================================
ComponentDidMount() => it is a method used to achieve asynchronous code.
                       This methods will get executed when the component mount or render for the first time and it ony get executed only once during components' lifetime.

React component render method will re-render component event if we pass same props and state which results in decrease in app performance.

React.PureComponent is same subclass like React.Component, but it only renders component when there is difference between current and previous state.

Syntax

```
import React from 'react';
class Counter extends React.PureComponent {
    render() {
        return <h1> Hello, {this.props.name}</h1>
    }
}
export default Counter;
```
==================================================================================================================================

Memos in React => Memo is a function based component
Syntax:
export const MemoizedChild = React.memo(Child);

Props are the only way that parent somponent can inte4act with child component, To modify the child we need to re-render it with new props.

But in some cases, we need to modify the child outside of the typical date flow. Reference a DOM element without re-rendering the whole component, without using props or state. Here, refs provide a way to access DOM nodes or React elements, which is created in the render method. Ref is created inside the constructor of a class component.

Syntax:
create a reference using React.createRef():

constructor(props) {
    super(props)
    this.myRef = React.createRef()
}

Accesing a reference

render() {
    return(
        <div ref = {this.myRef}></div>
    );
}

When to use ref:
1. Managing focus
2. intergrating with third party DOM libraries
 (we will not use ref in functional component)

==================================================================================================================================

ref task

input => firstname
input => lastname
input => email
input => password
input => re-enter password
submit button

after clicking submit, we have to display all the details in console using refs.

==================================================================================================================================

Higher order component (HOC): It is a function which accepts original component and returns the new component
To share common functionality between components

task
create higher order component for decreasing button click count and hover count

==================================================================================================================================

HTTP GET and POST:

Every web based application is constructed between client and server.

HTTP => Hypertext Transfer Protocol

HTTP GET => used to get data from the server. 
HTTP POST => used to send data to the server. (while creating forms in html, we specify action as "POST")

Axios Library => used to perform get and post in react. It is a promise based library.

steps to get data from api
1. import axios library
2. create a state property which will store the list of data
(if axios not found, pip install axios in terminal)

==================================================================================================================================
http get task

display title, body, userid from API
==================================================================================================================================

How to POST the data to an API from React Application

1. create input fields (user id, title, body of the content)
2. create state properties for the input fields, and then link them
3. add the onChange event handler to track the changes in the input values and keep them synced with the state object.
4. inside the changeHandler method, we are gonna use setState method where the key is going to be a target
5. besides action, we have to set onSubmit event handler
6. inside the submit handler, we have preventDefault() method which is used to avoid page refresh.
7. once the request is completed, wither we get a response or we get an error. so we have to use then and catch.
==================================================================================================================================

get and post task

post data to comments in the free API link

==================================================================================================================================

React Hooks: (very important topic in react framework)

    The concept of Hooks is a brand new feature in react, which is release after version 16.8.
    Hooks allows us to use react features without having to use a class component.
    eg: we can use states in function component using hooks.

Why hooks?
while using class component:
    1. we need to understand who `this` keyword works in javascript
    2. makes the code harder to follow

    react hooks is a special function that allows function components to use react features without writing class components

types of react hooks
    1. useState
    2. useEffect
    3. useContext
    4. useReducer
    5. useCallback


1. Steps to useState in functional component
    1. create a functional component
    2. use the useState hook => which accepts an arguement which is the initial value of the state property and it will return the current value of the state property, this method is also capable of updating the state property

==================================================================================================================================

create increment and decrement buttons using hooks

2.  The useEffect hooks let us perform side effects in functional components
    It is a replacement for componentDidMount in class component.

    fetching data from an API end point
    setting of timers
    when we specify we are basically requesting react to execute function that passed as an arguement every time the component renders
    useEffect will run after every render of the component
    it runs both after the first render, and after every update of the function.

3.  context provides a way to pass a data through the components without having to pass props down mannually at every level
    Instead of passing the data from one to another via props through multiple layers of components, we can initialise and export the context in the parent component(provider) and we can access it in whichever child component(consumer) we want.

==================================================================================================================================
useContext task

first create 3 components, without using hooks, use the data from component A in component C
next do the same with hooks.

==================================================================================================================================

4. it is used for state management 


==================================================================================================================================

task => Add student list:
            3 input fields, with name, age and department (cse, ese, mech, civil)
        output should be in the format: 
            student list

            vijay
            venkat
            sundar
            udei

            student info

            vijay is in cse dept. etc

==================================================================================================================================


5. It is a built-in hook in react, this hooks let us to invoke or memoize a callback function by preventing it from being recreated on every render. In simple terms, the callback function does not redefined on evrery render.

==================================================================================================================================

task

use useCallback hook to do the folloing

display image, price and add to cart button and remove from cart button, (add upto 6 products)










Redux in react

    * transferring the data from a component to a store(where data is stored) is called 'action'
    * from the store, we can access the data from anywhere.
    definition: It serves as a centralized store that is used for state management in an application, making it easier to manage state accross the entire application and it enables us to predict behaviour through a set of rules.